{
	"info": {
		"_postman_id": "b3808c51-8736-4b99-a11c-d6981a2dc3b7",
		"name": "Product Vault API",
		"description": "REST-API documentation for product-vault app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38714088"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "auth",
					"item": [
						{
							"name": "login",
							"item": [
								{
									"name": "User login action",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.token).to.exist;",
													"});",
													"",
													"pm.test(\"Token is a non-empty string\", function () {",
													"    const responseData = pm.response.json();    ",
													"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"test@test.test\",\n  \"password\": \"test\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "User login for get JWT auth token"
									},
									"response": [
										{
											"name": "Successful login (return token)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"test@test.test\",\n  \"password\": \"test\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "/api/auth/login",
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad request body data",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"test@test.test\",\n  \"password\": \"test\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Invalid credentials",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"test@test.test\",\n  \"password\": \"test\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "register",
							"item": [
								{
									"name": "User registration action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"randomEmail\", Math.random().toString(36).substring(7));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"pm.test(\"Response has the required fields - status and message\", function () {",
													"    const responseData = pm.response.json();    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.status).to.exist;",
													"    pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"pm.test(\"Status is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should be a non-empty string\");",
													"});",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
													"});",
													"",
													"pm.test(\"Response time is within an acceptable range\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(20000);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{randomEmail}}@becvar.xyz\",\n  \"first-name\": \"Pepa\",\n  \"last-name\": \"Zdepa\",\n  \"password\": \"testtest\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"register"
											]
										},
										"description": "Register a new user and return status"
									},
									"response": [
										{
											"name": "The success user register message",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"first-name\": \"<string>\",\n  \"last-name\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "/api/auth/register",
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Invalid request data message",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"first-name\": \"<string>\",\n  \"last-name\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Email already exists error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"first-name\": \"<string>\",\n  \"last-name\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "logs",
							"item": [
								{
									"name": "stats",
									"item": [
										{
											"name": "Get logs statistics and count",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response time is within an acceptable range\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(20000);",
															"});",
															"",
															"pm.test(\"Response has the required fields - status and data\", function () {",
															"    const responseData = pm.response.json(); ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData).to.have.property('status');",
															"    pm.expect(responseData).to.have.property('data');",
															"});",
															"",
															"pm.test(\"Logs count, unreaded logs count, and readed logs count are non-negative integers\", function () {",
															"    const responseData = pm.response.json();    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.data.logs_count).to.be.a('number').and.to.be.at.least(0);",
															"    pm.expect(responseData.data.unreaded_logs_count).to.be.a('number').and.to.be.at.least(0);",
															"    pm.expect(responseData.data.readed_logs_count).to.be.a('number').and.to.be.at.least(0);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/admin/logs/stats",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin",
														"logs",
														"stats"
													]
												}
											},
											"response": [
												{
													"name": "The logs statistics and count",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "/api/admin/logs/stats",
															"path": [
																"api",
																"admin",
																"logs",
																"stats"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\",\n  \"data\": {\n    \"logs_count\": \"<integer>\",\n    \"unreaded_logs_count\": \"<integer>\",\n    \"readed_logs_count\": \"<integer>\"\n  }\n}"
												}
											]
										}
									]
								},
								{
									"name": "mark-all-read",
									"item": [
										{
											"name": "Update all logs status to READED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response has the required fields - status and message\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
															"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
															"});",
															"",
															"pm.test(\"Status is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
															"});",
															"",
															"pm.test(\"Message is a non-empty string\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/admin/logs/mark-all-read",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin",
														"logs",
														"mark-all-read"
													]
												}
											},
											"response": [
												{
													"name": "Update logs status to READED successfully!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "/api/admin/logs/mark-all-read",
															"path": [
																"api",
																"admin",
																"logs",
																"mark-all-read"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get logs list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('status');",
													"    pm.expect(responseData).to.have.property('data');",
													"});",
													"",
													"pm.test(\"Validate the format of time - date, timezone_type, timezone\", function () {",
													"    const responseData = pm.response.json();    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data.logs_data).to.be.an('array');",
													"    responseData.data.logs_data.forEach(function(log) {",
													"        pm.expect(log.time).to.be.an('object');",
													"        pm.expect(log.time.date).to.be.a('string');",
													"        pm.expect(log.time.timezone_type).to.be.a('number');",
													"        pm.expect(log.time.timezone).to.be.a('string');",
													"    });",
													"});",
													"",
													"pm.test(\"Logs data array is present and contains expected number of elements\", function () {",
													"    const responseData = pm.response.json();    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data.logs_data).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Logs data properties have expected types and formats\", function () {",
													"    const responseData = pm.response.json(); ",
													"    pm.expect(responseData.data.logs_data).to.be.an('array');",
													"    responseData.data.logs_data.forEach(function(log) {",
													"        pm.expect(log.id).to.be.a('number');",
													"        pm.expect(log.name).to.be.a('string');",
													"        pm.expect(log.message).to.be.a('string');",
													"        pm.expect(log.user_agent).to.be.a('string');",
													"        pm.expect(log.request_uri).to.be.a('string');",
													"        pm.expect(log.request_method).to.be.a('string');",
													"        pm.expect(log.ip_address).to.be.a('string');",
													"        pm.expect(log.level).to.be.a('number');",
													"        pm.expect(log.user_id).to.be.a('number');",
													"        pm.expect(log.status).to.be.a('string');",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/admin/logs?page=1&status=UNREADED",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin",
												"logs"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Page number"
												},
												{
													"key": "status",
													"value": "UNREADED",
													"description": "Status of the logs"
												}
											]
										}
									},
									"response": [
										{
											"name": "The logs list",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "/api/admin/logs?page=&status=",
													"path": [
														"api",
														"admin",
														"logs"
													],
													"query": [
														{
															"key": "page",
															"value": "",
															"description": "Page number"
														},
														{
															"key": "status",
															"value": "",
															"description": "Status of the logs"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"data\": {\n    \"stats\": {\n      \"logs_count\": \"<integer>\",\n      \"unreaded_logs_count\": \"<integer>\",\n      \"readed_logs_count\": \"<integer>\"\n    },\n    \"logs_data\": [\n      {\n        \"id\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"message\": \"<string>\",\n        \"time\": {\n          \"date\": \"<string>\",\n          \"timezone_type\": \"<integer>\",\n          \"timezone\": \"<string>\"\n        },\n        \"user_agent\": \"<string>\",\n        \"request_uri\": \"<string>\",\n        \"request_method\": \"<string>\",\n        \"ip_address\": \"<string>\",\n        \"level\": \"<integer>\",\n        \"user_id\": \"<integer>\",\n        \"status\": \"<string>\"\n      },\n      {\n        \"id\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"message\": \"<string>\",\n        \"time\": {\n          \"date\": \"<string>\",\n          \"timezone_type\": \"<integer>\",\n          \"timezone\": \"<string>\"\n        },\n        \"user_agent\": \"<string>\",\n        \"request_uri\": \"<string>\",\n        \"request_method\": \"<string>\",\n        \"ip_address\": \"<string>\",\n        \"level\": \"<integer>\",\n        \"user_id\": \"<integer>\",\n        \"status\": \"<string>\"\n      }\n    ],\n    \"pagination_info\": {\n      \"total_logs_count\": \"<integer>\",\n      \"current_page\": \"<integer>\",\n      \"total_pages_count\": \"<integer>\",\n      \"is_next_page_exists\": \"<boolean>\",\n      \"is_previous_page_exists\": \"<boolean>\",\n      \"last_page_number\": \"<integer>\"\n    }\n  }\n}"
										},
										{
											"name": "No logs found for specified filters",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/admin/logs?page=&status=",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin",
														"logs"
													],
													"query": [
														{
															"key": "page",
															"value": "",
															"description": "Page number"
														},
														{
															"key": "status",
															"value": "",
															"description": "Status of the logs"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\",\n  \"current_filters\": {\n    \"status\": \"<string>\",\n    \"page\": \"<integer>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "log",
							"item": [
								{
									"name": "status",
									"item": [
										{
											"name": "update",
											"item": [
												{
													"name": "Update log status",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.globals.set(\"randomStatus\", Math.random().toString(36).substring(7));",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate response schema for the presence of 'status' and 'message' fields and their data types\", function () {",
																	"    const responseData = pm.response.json();    ",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData).to.have.property('status').that.is.a('string');",
																	"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/admin/log/status/update?id=1&status={{randomStatus}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"log",
																"status",
																"update"
															],
															"query": [
																{
																	"key": "id",
																	"value": "1",
																	"description": "Log id"
																},
																{
																	"key": "status",
																	"value": "{{randomStatus}}",
																	"description": "New log status"
																}
															]
														}
													},
													"response": [
														{
															"name": "Log status updated successfully!",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "/api/admin/log/status/update?id=&status=",
																	"path": [
																		"api",
																		"admin",
																		"log",
																		"status",
																		"update"
																	],
																	"query": [
																		{
																			"key": "id",
																			"value": "",
																			"description": "Log id"
																		},
																		{
																			"key": "status",
																			"value": "",
																			"description": "New log status"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														},
														{
															"name": "Log not found!",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/admin/log/status/update?id=&status=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"log",
																		"status",
																		"update"
																	],
																	"query": [
																		{
																			"key": "id",
																			"value": "",
																			"description": "Log id"
																		},
																		{
																			"key": "status",
																			"value": "",
																			"description": "New log status"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "product",
							"item": [
								{
									"name": "category",
									"item": [
										{
											"name": "list",
											"item": [
												{
													"name": "Get all product categories with their database ids and names",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response time is within an acceptable range\", function () {",
																	"    pm.expect(pm.response.responseTime).to.be.below(20000);",
																	"});",
																	"",
																	"pm.test(\"Response has the required fields - status, message, and categories\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.exist;",
																	"    pm.expect(responseData.message).to.exist;",
																	"    pm.expect(responseData.categories).to.exist;",
																	"});",
																	"",
																	"pm.test(\"Categories array structure is valid\", function () {",
																	"    const responseData = pm.response.json();    ",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.categories).to.be.an('array');",
																	"    responseData.categories.forEach(function(category) {",
																	"        pm.expect(category).to.have.property('name').that.is.a('string').and.is.not.empty;",
																	"    });",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/admin/product/category/list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"product",
																"category",
																"list"
															]
														}
													},
													"response": [
														{
															"name": "All product categories",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/category/list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"category",
																		"list"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\",\n  \"categories\": [\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    }\n  ]\n}"
														},
														{
															"name": "No product categories found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/category/list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"category",
																		"list"
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "create",
											"item": [
												{
													"name": "Create product category",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.globals.set(\"randomName\", Math.random().toString(36).substring(7));",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response status code is 201\", function () {",
																	"    pm.expect(pm.response.code).to.equal(201);",
																	"});",
																	"",
																	"pm.test(\"Response has the required fields - status and message\", function () {",
																	"    const responseData = pm.response.json();    ",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData).to.have.property('status');",
																	"    pm.expect(responseData).to.have.property('message');",
																	"});",
																	"",
																	"pm.test(\"Status is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();    ",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
																	"});",
																	"",
																	"pm.test(\"Message is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();    ",
																	"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "multipart/form-data"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "category_name",
																	"value": "\"{{randomName}}\"",
																	"description": "Category name",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/api/admin/product/category/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"product",
																"category",
																"create"
															]
														}
													},
													"response": [
														{
															"name": "The category created successfully",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "multipart/form-data"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "category_name",
																			"value": "<string>",
																			"description": "Category name",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/category/create",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"category",
																		"create"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "Category already exists",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "multipart/form-data"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "category_name",
																			"value": "<string>",
																			"description": "Category name",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/category/create",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"category",
																		"create"
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "rename",
											"item": [
												{
													"name": "Rename product category",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.globals.set(\"randomName\", Math.random().toString(36).substring(7));",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response has the required fields - status and message\", function () {",
																	"    const responseData = pm.response.json();    ",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData).to.have.property('status');",
																	"    pm.expect(responseData).to.have.property('message');",
																	"});",
																	"",
																	"pm.test(\"Status is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();    ",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
																	"});",
																	"",
																	"pm.test(\"Message is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();  ",
																	"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/admin/product/category/rename?category_id=1&category_name=\"{{randomName}}\"",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"product",
																"category",
																"rename"
															],
															"query": [
																{
																	"key": "category_id",
																	"value": "1",
																	"description": "(Required) Category id to rename"
																},
																{
																	"key": "category_name",
																	"value": "\"{{randomName}}\"",
																	"description": "(Required) Category new name"
																}
															]
														}
													},
													"response": [
														{
															"name": "The category renamed successfully",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/category/rename?category_id=&category_name=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"category",
																		"rename"
																	],
																	"query": [
																		{
																			"key": "category_id",
																			"value": "",
																			"description": "(Required) Category id to rename"
																		},
																		{
																			"key": "category_name",
																			"value": "",
																			"description": "(Required) Category new name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "Category not found",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/category/rename?category_id=&category_name=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"category",
																		"rename"
																	],
																	"query": [
																		{
																			"key": "category_id",
																			"value": "",
																			"description": "(Required) Category id to rename"
																		},
																		{
																			"key": "category_name",
																			"value": "",
																			"description": "(Required) Category new name"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "Category name already exists",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/category/rename?category_id=&category_name=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"category",
																		"rename"
																	],
																	"query": [
																		{
																			"key": "category_id",
																			"value": "",
																			"description": "(Required) Category id to rename"
																		},
																		{
																			"key": "category_name",
																			"value": "",
																			"description": "(Required) Category new name"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "create",
									"item": [
										{
											"name": "Create product action",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Response has the required fields - status, message, product_data\", function () {",
															"    const responseData = pm.response.json();   ",
															"    pm.expect(responseData).to.have.property('status');",
															"    pm.expect(responseData).to.have.property('message');",
															"    pm.expect(responseData).to.have.property('product_data');",
															"});",
															"",
															"pm.test(\"Validate the product_data object\", function () {",
															"    const responseData = pm.response.json();    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.product_data).to.exist.and.to.be.an('object');",
															"});",
															"",
															"pm.test(\"Categories and attributes arrays are present and empty if no data is provided\", function () {",
															"    const responseData = pm.response.json();    ",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.product_data.categories).to.be.an('array').that.is.empty;",
															"    pm.expect(responseData.product_data.attributes).to.be.an('array').that.is.empty;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"product name\",\n  \"description\": \"idk\",\n  \"price\": \"1337\",\n  \"price-currency\": \"CZK\",\n  \"categories\": [\n    \"Test\"\n  ]\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/admin/product/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin",
														"product",
														"create"
													]
												},
												"description": "Create a new product in database"
											},
											"response": [
												{
													"name": "The success product create message",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<integer>\",\n  \"price-currency\": \"<string>\",\n  \"categories\": [\n    \"<string>\"\n  ],\n  \"attributes\": [\n    [\n      {\n        \"name\": \"<string>\",\n        \"attributeValue\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"attributeValue\": \"<string>\"\n      }\n    ],\n    [\n      {\n        \"name\": \"<string>\",\n        \"attributeValue\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"attributeValue\": \"<string>\"\n      }\n    ]\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/admin/product/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"product",
																"create"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
												},
												{
													"name": "Invalid request data message",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<integer>\",\n  \"price-currency\": \"<string>\",\n  \"categories\": [\n    \"<string>\"\n  ],\n  \"attributes\": [\n    [\n      {\n        \"name\": \"<string>\",\n        \"attributeValue\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"attributeValue\": \"<string>\"\n      }\n    ],\n    [\n      {\n        \"name\": \"<string>\",\n        \"attributeValue\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"attributeValue\": \"<string>\"\n      }\n    ]\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/admin/product/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"product",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "update",
									"item": [
										{
											"name": "categories",
											"item": [
												{
													"name": "Update product category action",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.globals.set(\"randomCategory\", Math.random().toString(36).substring(7));",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response has the required fields - status and message\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.exist;",
																	"    pm.expect(responseData.message).to.exist;",
																	"});",
																	"",
																	"pm.test(\"Status is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();    ",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
																	"});",
																	"",
																	"pm.test(\"Message is a non-empty string\", function () {",
																	"    const responseData = pm.response.json(); ",
																	"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"product-id\": 221,\n  \"process\": \"add\",\n  \"category-list\": [\n    \"{{randomCategory}}\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/admin/product/update/categories",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"product",
																"update",
																"categories"
															]
														},
														"description": "Update product category and return status"
													},
													"response": [
														{
															"name": "The success product data update message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"product-id\": \"<integer>\",\n  \"process\": \"<string>\",\n  \"category-list\": [\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/update/categories",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"update",
																		"categories"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														},
														{
															"name": "Invalid request data message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"product-id\": \"<integer>\",\n  \"process\": \"<string>\",\n  \"category-list\": [\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/update/categories",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"update",
																		"categories"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														},
														{
															"name": "Product not found message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"product-id\": \"<integer>\",\n  \"process\": \"<string>\",\n  \"category-list\": [\n    \"<string>\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/update/categories",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"update",
																		"categories"
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "attribute",
											"item": [
												{
													"name": "Update product attribute action",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response time is within an acceptable range\", function () {",
																	"    pm.expect(pm.response.responseTime).to.be.below(20000);",
																	"});",
																	"",
																	"pm.test(\"Response has the required fields - status and message\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.exist;",
																	"    pm.expect(responseData.message).to.exist;",
																	"});",
																	"",
																	"pm.test(\"Status is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();    ",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should be a non-empty string\");",
																	"});",
																	"",
																	"pm.test(\"Message is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();    ",
																	"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"product-id\": 321,\n  \"process\": \"add\",\n  \"attribute-name\": \"color\",\n  \"attribute-value\": \"red\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/admin/product/update/attribute",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"product",
																"update",
																"attribute"
															]
														},
														"description": "Update product attribute and return status"
													},
													"response": [
														{
															"name": "The success product data update message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"product-id\": \"<integer>\",\n  \"process\": \"<string>\",\n  \"attribute-name\": \"<string>\",\n  \"attribute-value\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/update/attribute",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"update",
																		"attribute"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														},
														{
															"name": "Invalid request data message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"product-id\": \"<integer>\",\n  \"process\": \"<string>\",\n  \"attribute-name\": \"<string>\",\n  \"attribute-value\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/update/attribute",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"update",
																		"attribute"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														},
														{
															"name": "Product not found message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"product-id\": \"<integer>\",\n  \"process\": \"<string>\",\n  \"attribute-name\": \"<string>\",\n  \"attribute-value\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/product/update/attribute",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"product",
																		"update",
																		"attribute"
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Update product data action",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response time is within an acceptable range\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(20000);",
															"});",
															"",
															"pm.test(\"Response has the required fields\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.status).to.exist;",
															"    pm.expect(responseData.message).to.exist;",
															"    pm.expect(responseData.product_data).to.exist;",
															"});",
															"",
															"pm.test(\"Product ID is a non-negative integer\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.product_data.id).to.be.a('number').and.to.be.at.least(0);",
															"});",
															"",
															"pm.test(\"Price is a non-negative number\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.product_data.price).to.be.a('number').and.to.be.at.least(0);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"product-id\": 316,\n  \"name\": \"new name\",\n  \"description\": \"new desc\",\n  \"price\": \"1337\",\n  \"price-currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/admin/product/update",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin",
														"product",
														"update"
													]
												},
												"description": "Update product data and return status"
											},
											"response": [
												{
													"name": "The success product data update message",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"product-id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<integer>\",\n  \"price-currency\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/admin/product/update",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"product",
																"update"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
												},
												{
													"name": "Invalid request data message",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"product-id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<integer>\",\n  \"price-currency\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/admin/product/update",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"product",
																"update"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "user",
							"item": [
								{
									"name": "list",
									"item": [
										{
											"name": "Get users list (for admin users)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Response has the required fields - status, count, and users\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData).to.have.property('status');",
															"    pm.expect(responseData).to.have.property('count');",
															"    pm.expect(responseData).to.have.property('users');",
															"});",
															"",
															"pm.test(\"Id, email, first-name, and last-name are non-empty strings\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData.users).to.be.an('array').that.is.not.empty;",
															"    responseData.users.forEach(function(user) {",
															"        pm.expect(user.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
															"        pm.expect(user['first-name']).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
															"        pm.expect(user['last-name']).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
															"    });",
															"});",
															"",
															"pm.test(\"Roles is an array and contains at least one element\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('object');",
															"    pm.expect(responseData.users).to.be.an('array');",
															"    responseData.users.forEach(user => {",
															"        pm.expect(user.roles).to.be.an('array').and.to.have.lengthOf.at.least(1);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/admin/user/list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin",
														"user",
														"list"
													]
												}
											},
											"response": [
												{
													"name": "The users list",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/admin/user/list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"user",
																"list"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\",\n  \"count\": \"<integer>\",\n  \"users\": [\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first-name\": \"<string>\",\n      \"last-name\": \"<string>\",\n      \"roles\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"register-time\": \"<dateTime>\",\n      \"last-login-time\": \"<dateTime>\",\n      \"ip-address\": \"<string>\",\n      \"browser\": \"<string>\",\n      \"status\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first-name\": \"<string>\",\n      \"last-name\": \"<string>\",\n      \"roles\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"register-time\": \"<dateTime>\",\n      \"last-login-time\": \"<dateTime>\",\n      \"ip-address\": \"<string>\",\n      \"browser\": \"<string>\",\n      \"status\": \"<string>\"\n    }\n  ]\n}"
												},
												{
													"name": "The unauthorized message",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/admin/user/list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"user",
																"list"
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "update",
									"item": [
										{
											"name": "role",
											"item": [
												{
													"name": "User role update action (update by user id for admin)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.globals.set(\"randomRole\", Math.random().toString(8).substring(7));",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response status code is 200\", function () {",
																	"    pm.expect(pm.response.code).to.equal(200);",
																	"});",
																	"",
																	"pm.test(\"Response has the required fields - status and message\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.exist;",
																	"    pm.expect(responseData.message).to.exist;",
																	"});",
																	"",
																	"pm.test(\"Status is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should be a non-empty string\");",
																	"});",
																	"",
																	"pm.test(\"Message is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"user-id\": 5,\n  \"task\": \"add\",\n  \"role\": \"{{randomRole}}\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/admin/user/update/role",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"user",
																"update",
																"role"
															]
														},
														"description": "Update user role and return status"
													},
													"response": [
														{
															"name": "The success user role update message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"user-id\": \"<integer>\",\n  \"task\": \"<string>\",\n  \"role\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/user/update/role",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"user",
																		"update",
																		"role"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														},
														{
															"name": "Invalid request data message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"user-id\": \"<integer>\",\n  \"task\": \"<string>\",\n  \"role\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/user/update/role",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"user",
																		"update",
																		"role"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														},
														{
															"name": "User not found message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"user-id\": \"<integer>\",\n  \"task\": \"<string>\",\n  \"role\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/user/update/role",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"user",
																		"update",
																		"role"
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "status",
											"item": [
												{
													"name": "User status update action (update by user id for admin)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.globals.set(\"randomStatus\", Math.random().toString(36).substring(7));",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Response status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response has the required fields - status and message\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.exist;",
																	"    pm.expect(responseData.message).to.exist;",
																	"});",
																	"",
																	"pm.test(\"Status is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
																	"});",
																	"",
																	"pm.test(\"Message is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"user-id\": 5,\n  \"status\": \"{{randomStatus}}\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/admin/user/update/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"admin",
																"user",
																"update",
																"status"
															]
														},
														"description": "Update user status and return status"
													},
													"response": [
														{
															"name": "The success user status update message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"user-id\": \"<integer>\",\n  \"status\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/user/update/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"user",
																		"update",
																		"status"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														},
														{
															"name": "Invalid request data message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"user-id\": \"<integer>\",\n  \"status\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/user/update/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"user",
																		"update",
																		"status"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														},
														{
															"name": "User not found message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"user-id\": \"<integer>\",\n  \"status\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/user/update/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"user",
																		"update",
																		"status"
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														},
														{
															"name": "The update error message",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"user-id\": \"<integer>\",\n  \"status\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/admin/user/update/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"admin",
																		"user",
																		"update",
																		"status"
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "product",
					"item": [
						{
							"name": "export",
							"item": [
								{
									"name": "json",
									"item": [
										{
											"name": "Export products to json file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type header is application/json\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});",
															"",
															"pm.test(\"Validate the schema of the response JSON - id, name, description, price, priceCurrency, addedTime, lastEditTime, active, categories, attributes, product_icon, product_images\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
															"    responseData.forEach(function(product) {",
															"        pm.expect(product).to.be.an('object');",
															"        pm.expect(product).to.have.property('id');",
															"        pm.expect(product).to.have.property('name');",
															"        pm.expect(product).to.have.property('description');",
															"        pm.expect(product).to.have.property('price');",
															"        pm.expect(product).to.have.property('priceCurrency');",
															"        pm.expect(product).to.have.property('addedTime');",
															"        pm.expect(product).to.have.property('lastEditTime');",
															"        pm.expect(product).to.have.property('active');",
															"        pm.expect(product).to.have.property('categories');",
															"        pm.expect(product).to.have.property('attributes');",
															"        pm.expect(product).to.have.property('product_icon');",
															"        pm.expect(product).to.have.property('product_images');",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/product/export/json",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"export",
														"json"
													]
												}
											},
											"response": [
												{
													"name": "The export data file download",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/product/export/json",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"product",
																"export",
																"json"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "xls",
									"item": [
										{
											"name": "Export products to xlsx file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/product/export/xls",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"export",
														"xls"
													]
												}
											},
											"response": [
												{
													"name": "The export data file download",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/product/export/xls",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"product",
																"export",
																"xls"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "xml",
									"item": [
										{
											"name": "Export products to xml file",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response has the required XML content type\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");",
															"});",
															"",
															"pm.test(\"Validate the structure of the XML response\", function () {",
															"    const xml2js = require('xml2js');",
															"    const parser = new xml2js.Parser({ explicitArray: false });",
															"    parser.parseString(pm.response.text(), function (err, responseData) {",
															"        pm.expect(err).to.be.null;",
															"        pm.expect(responseData).to.be.an('object');",
															"        pm.expect(responseData.products).to.exist.and.to.be.an('object');",
															"        pm.expect(responseData.products.product).to.exist.and.to.be.an('array');",
															"        const product = responseData.products.product[0];",
															"        pm.expect(product).to.be.an('object');",
															"        pm.expect(product.id).to.exist.and.to.be.a('string');",
															"        pm.expect(product.name).to.exist.and.to.be.a('string');",
															"        pm.expect(product.description).to.exist.and.to.be.a('string');",
															"        pm.expect(product.price).to.exist.and.to.be.a('string');",
															"        pm.expect(product.priceCurrency).to.exist.and.to.be.a('string');",
															"        pm.expect(product.addedTime).to.exist.and.to.be.a('string');",
															"        pm.expect(product.lastEditTime).to.exist.and.to.be.a('string');",
															"        pm.expect(product.active).to.exist.and.to.be.a('string');",
															"        pm.expect(product.attributes).to.exist.and.to.be.an('object');",
															"        pm.expect(product.attributes.attribute).to.exist.and.to.be.an('array');",
															"        pm.expect(product.product_icon).to.exist.and.to.be.a('string');",
															"        pm.expect(product.product_images).to.exist.and.to.be.an('object');",
															"        pm.expect(product.product_images.image).to.exist.and.to.be.an('array');",
															"    });",
															"});",
															"pm.test(\"Products object contains non-empty properties\", function () {",
															"    const xml2js = require('xml2js');",
															"    const parser = new xml2js.Parser({ explicitArray: false });",
															"    parser.parseString(pm.response.text(), function (err, responseData) {",
															"        pm.expect(err).to.be.null;",
															"        pm.expect(responseData.products).to.exist;",
															"        pm.expect(responseData.products.product).to.be.an('array');",
															"        responseData.products.product.forEach(function(product) {",
															"            pm.expect(product.id).to.exist.and.to.not.be.empty;",
															"            pm.expect(product.name).to.exist.and.to.not.be.empty;",
															"            pm.expect(product.description).to.exist.and.to.not.be.empty;",
															"            pm.expect(product.price).to.exist.and.to.not.be.empty;",
															"            pm.expect(product.priceCurrency).to.exist.and.to.not.be.empty;",
															"            pm.expect(product.addedTime).to.exist.and.to.not.be.empty;",
															"            pm.expect(product.lastEditTime).to.exist.and.to.not.be.empty;",
															"            pm.expect(product.active).to.exist.and.to.not.be.empty;",
															"            pm.expect(product.categories).to.exist;",
															"            pm.expect(product.attributes).to.exist;",
															"            pm.expect(product.product_icon).to.exist.and.to.not.be.empty;",
															"            pm.expect(product.product_images).to.exist;",
															"        });",
															"    });",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/product/export/xml",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"export",
														"xml"
													]
												}
											},
											"response": [
												{
													"name": "The export data file download",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/product/export/xml",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"product",
																"export",
																"xml"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "asset",
							"item": [
								{
									"name": "icon",
									"item": [
										{
											"name": "Get product icon",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Response time is within an acceptable range\", function () {",
															"  pm.expect(pm.response.responseTime).to.be.below(20000);",
															"});",
															"",
															"pm.test(\"Content-Type header is 'image/png'\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/png\");",
															"});",
															"",
															"pm.test(\"Response body is an image/png data type\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"image/png\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/product/asset/icon?icon_file=testing-icon.png",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"asset",
														"icon"
													],
													"query": [
														{
															"key": "icon_file",
															"value": "testing-icon.png",
															"description": "(Required) Product icon file"
														}
													]
												}
											},
											"response": [
												{
													"name": "The product icon",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/product/asset/icon?icon_file=",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"product",
																"asset",
																"icon"
															],
															"query": [
																{
																	"key": "icon_file",
																	"value": "",
																	"description": "(Required) Product icon file"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "The product icon not found message",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/product/asset/icon?icon_file=",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"product",
																"asset",
																"icon"
															],
															"query": [
																{
																	"key": "icon_file",
																	"value": "",
																	"description": "(Required) Product icon file"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "image",
									"item": [
										{
											"name": "Get product image",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {",
															"    pm.expect(pm.response.code).to.equal(200);",
															"});",
															"",
															"pm.test(\"Content-Type header is image/jpg\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"image/jpg\");",
															"});",
															"",
															"pm.test(\"Response body is a valid image file\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"image/\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/product/asset/image?image_file=test-image-1.jpg",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"asset",
														"image"
													],
													"query": [
														{
															"key": "image_file",
															"value": "test-image-1.jpg",
															"description": "(Required) Product image file"
														}
													]
												}
											},
											"response": [
												{
													"name": "The product image",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/product/asset/image?image_file=",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"product",
																"asset",
																"image"
															],
															"query": [
																{
																	"key": "image_file",
																	"value": "",
																	"description": "(Required) Product image file"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "The product image not found message",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/product/asset/image?image_file=",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"product",
																"asset",
																"image"
															],
															"query": [
																{
																	"key": "image_file",
																	"value": "",
																	"description": "(Required) Product image file"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "get",
							"item": [
								{
									"name": "Get product by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 20000s\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(20000);",
													"});",
													"",
													"pm.test(\"Validate the response schema for required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data.id).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.data.name).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data.description).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data.price).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.data.priceCurrency).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data.active).to.exist.and.to.be.a('boolean');",
													"    pm.expect(responseData.data.categories).to.exist.and.to.be.an('array');",
													"    pm.expect(responseData.data.attributes).to.exist.and.to.be.an('array');",
													"    pm.expect(responseData.data.icon).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data.images).to.exist.and.to.be.an('array');",
													"});",
													"",
													"pm.test(\"Data object is present and contains expected fields\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.exist;",
													"    pm.expect(responseData.data.id).to.exist;",
													"    pm.expect(responseData.data.name).to.exist;",
													"    pm.expect(responseData.data.description).to.exist;",
													"    pm.expect(responseData.data.price).to.exist;",
													"    pm.expect(responseData.data.priceCurrency).to.exist;",
													"    pm.expect(responseData.data.active).to.exist;",
													"    pm.expect(responseData.data.categories).to.exist;",
													"    pm.expect(responseData.data.attributes).to.exist;",
													"    pm.expect(responseData.data.icon).to.exist;",
													"    pm.expect(responseData.data.images).to.exist;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/product/get?id=1&currency=CZK",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"product",
												"get"
											],
											"query": [
												{
													"key": "id",
													"value": "1",
													"description": "(Required) Product id"
												},
												{
													"key": "currency",
													"value": "CZK",
													"description": "Product price currency"
												}
											]
										}
									},
									"response": [
										{
											"name": "Product data",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/product/get?id=&currency=",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"get"
													],
													"query": [
														{
															"key": "id",
															"value": "",
															"description": "(Required) Product id"
														},
														{
															"key": "currency",
															"value": "",
															"description": "Product price currency"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"data\": {\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<float>\",\n    \"priceCurrency\": \"<string>\",\n    \"active\": \"<boolean>\",\n    \"categories\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"attributes\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"icon\": \"<string>\",\n    \"images\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
										},
										{
											"name": "The error message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/product/get?id=&currency=",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"get"
													],
													"query": [
														{
															"key": "id",
															"value": "",
															"description": "(Required) Product id"
														},
														{
															"key": "currency",
															"value": "",
															"description": "Product price currency"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "list",
							"item": [
								{
									"name": "Get a list of products with filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status field should exist and be a string\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.have.property('status').that.is.a('string');",
													"});",
													"",
													"pm.test(\"Products data array and nested fields are present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.have.property('products_data').that.is.an('array').and.not.empty;",
													"    responseData.products_data.forEach(function(product) {",
													"        pm.expect(product).to.have.property('id').that.is.a('number');",
													"        pm.expect(product).to.have.property('name').that.is.a('string');",
													"        pm.expect(product).to.have.property('description').that.is.a('string');",
													"        pm.expect(product).to.have.property('price').that.is.a('number');",
													"        pm.expect(product).to.have.property('priceCurrency').that.is.a('string');",
													"        pm.expect(product).to.have.property('active').that.is.a('boolean');",
													"        pm.expect(product).to.have.property('categories').that.is.an('array');",
													"        pm.expect(product).to.have.property('attributes').that.is.an('array');",
													"        pm.expect(product).to.have.property('icon').that.is.a('string');",
													"        pm.expect(product).to.have.property('images').that.is.an('array');",
													"    });",
													"});",
													"",
													"pm.test(\"Verify the response schema for pagination_info and its nested fields\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.pagination_info).to.exist.and.to.be.an('object');",
													"    pm.expect(responseData.pagination_info.total_pages).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.pagination_info.current_page_number).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.pagination_info.total_items).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.pagination_info.items_per_actual_page).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.pagination_info.last_page_number).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.pagination_info.is_next_page_exists).to.exist.and.to.be.a('boolean');",
													"    pm.expect(responseData.pagination_info.is_previous_page_exists).to.exist.and.to.be.a('boolean');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"search\": \"\",\n  \"attributes\": [\n  ],\n  \"categories\": [\n  ],\n  \"page\": 1,\n  \"limit\": 100,\n  \"sort\": \"name\",\n  \"currency\": \"USD\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/product/list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"product",
												"list"
											]
										},
										"description": "Retrieve a filtered list of products based on provided criteria"
									},
									"response": [
										{
											"name": "The list of filtered products",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"search\": \"<string>\",\n  \"attributes\": [\n    {\n      \"name\": \"<string>\",\n      \"value\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"value\": \"<string>\"\n    }\n  ],\n  \"categories\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"page\": \"<integer>\",\n  \"limit\": \"<integer>\",\n  \"sort\": \"<string>\",\n  \"currency\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/product/list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"list"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"products_data\": {\n    \"products_data\": [\n      {\n        \"id\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"description\": \"<string>\",\n        \"price\": \"<float>\",\n        \"priceCurrency\": \"<string>\",\n        \"active\": \"<boolean>\",\n        \"categories\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"attributes\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"icon\": \"<string>\",\n        \"images\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<integer>\",\n        \"name\": \"<string>\",\n        \"description\": \"<string>\",\n        \"price\": \"<float>\",\n        \"priceCurrency\": \"<string>\",\n        \"active\": \"<boolean>\",\n        \"categories\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"attributes\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"icon\": \"<string>\",\n        \"images\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"pagination_info\": [\n      {\n        \"total_pages\": \"<integer>\",\n        \"current_page_number\": \"<integer>\",\n        \"total_items\": \"<integer>\",\n        \"items_per_actual_page\": \"<integer>\",\n        \"last_page_number\": \"<integer>\",\n        \"is_next_page_exists\": \"<boolean>\",\n        \"is_previous_page_exists\": \"<boolean>\"\n      },\n      {\n        \"total_pages\": \"<integer>\",\n        \"current_page_number\": \"<integer>\",\n        \"total_items\": \"<integer>\",\n        \"items_per_actual_page\": \"<integer>\",\n        \"last_page_number\": \"<integer>\",\n        \"is_next_page_exists\": \"<boolean>\",\n        \"is_previous_page_exists\": \"<boolean>\"\n      }\n    ]\n  },\n  \"stats\": {\n    \"total\": \"<integer>\",\n    \"active\": \"<integer>\",\n    \"inactive\": \"<integer>\"\n  }\n}"
										},
										{
											"name": "Invalid request data message",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"search\": \"<string>\",\n  \"attributes\": [\n    {\n      \"name\": \"<string>\",\n      \"value\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"value\": \"<string>\"\n    }\n  ],\n  \"categories\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"page\": \"<integer>\",\n  \"limit\": \"<integer>\",\n  \"sort\": \"<string>\",\n  \"currency\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/product/list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"list"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
										},
										{
											"name": "Server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"search\": \"<string>\",\n  \"attributes\": [\n    {\n      \"name\": \"<string>\",\n      \"value\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"value\": \"<string>\"\n    }\n  ],\n  \"categories\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"page\": \"<integer>\",\n  \"limit\": \"<integer>\",\n  \"sort\": \"<string>\",\n  \"currency\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/product/list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"list"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "stats",
							"item": [
								{
									"name": "Get product stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is in an acceptable range\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(20000);",
													"});",
													"",
													"pm.test(\"Status and data fields are present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.status).to.exist;",
													"    pm.expect(responseData.data).to.exist;",
													"});",
													"",
													"pm.test(\"Total, active, and inactive fields in the data object are non-negative integers\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data.total).to.be.a('number').and.to.be.at.least(0);",
													"    pm.expect(responseData.data.active).to.be.a('number').and.to.be.at.least(0);",
													"    pm.expect(responseData.data.inactive).to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"pm.test(\"Status field is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/product/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"product",
												"stats"
											]
										}
									},
									"response": [
										{
											"name": "The product stats",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/product/stats",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"stats"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"data\": {\n    \"total\": \"<integer>\",\n    \"active\": \"<integer>\",\n    \"inactive\": \"<integer>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "categories",
							"item": [
								{
									"name": "Get product categories list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response has the required fields - status and data\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('status');",
													"    pm.expect(responseData).to.have.property('data');",
													"});",
													"",
													"pm.test(\"Status is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
													"});",
													"",
													"pm.test(\"Data is an array and is not empty\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Data array should not be empty\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/product/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"product",
												"categories"
											]
										}
									},
									"response": [
										{
											"name": "The product categories list",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/product/categories",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"categories"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"data\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "attributes",
							"item": [
								{
									"name": "Get product attributes list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Response time is within an acceptable range\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(300);",
													"});",
													"",
													"pm.test(\"Response has the required fields - status and data\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('status');",
													"    pm.expect(responseData).to.have.property('data');",
													"});",
													"",
													"pm.test(\"Status is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
													"});",
													"",
													"pm.test(\"Data is an array with at least one element\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/product/attributes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"product",
												"attributes"
											]
										}
									},
									"response": [
										{
											"name": "The product attributes list",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/product/attributes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"product",
														"attributes"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"data\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "user",
					"item": [
						{
							"name": "info",
							"item": [
								{
									"name": "Get user info (get self user info)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Validate the response schema for required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data.email).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data['first-name']).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data['last-name']).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data.roles).to.exist.and.to.be.an('array');",
													"    pm.expect(responseData.data['register-time']).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data['last-login-time']).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data['ip-address']).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data['user-agent']).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data.status).to.exist.and.to.be.a('string');",
													"    pm.expect(responseData.data['is-active']).to.exist.and.to.be.a('boolean');",
													"});",
													"",
													"pm.test(\"Email is in a valid format\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
													"});",
													"",
													"pm.test(\"Roles array is present and contains expected number of elements\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.have.property('data');",
													"    pm.expect(responseData.data.roles).to.be.an('array');",
													"    pm.expect(responseData.data.roles).to.have.lengthOf(2);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/user/info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"info"
											]
										}
									},
									"response": [
										{
											"name": "The user data (self)",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/user/info",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"user",
														"info"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"<string>\",\n  \"data\": {\n    \"email\": \"<string>\",\n    \"first-name\": \"<string>\",\n    \"last-name\": \"<string>\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"register-time\": \"<dateTime>\",\n    \"last-login-time\": \"<dateTime>\",\n    \"ip-address\": \"<string>\",\n    \"user-agent\": \"<string>\",\n    \"status\": \"<string>\",\n    \"is-active\": \"<boolean>\"\n  }\n}"
										},
										{
											"name": "The user not found message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/user/info",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"user",
														"info"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "The user not found message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/user/info",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"user",
														"info"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "error",
			"item": [
				{
					"name": "not found",
					"item": [
						{
							"name": "Handle not found error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"    pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/error/notfound",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"error",
										"notfound"
									]
								}
							},
							"response": [
								{
									"name": "The not found error message",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/error/notfound",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"error",
												"notfound"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Handle error by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Status is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
									"});",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/error?code=403",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"error"
							],
							"query": [
								{
									"key": "code",
									"value": "403",
									"description": "(Required) Error code"
								}
							]
						}
					},
					"response": [
						{
							"name": "The error message",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/error?code=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"error"
									],
									"query": [
										{
											"key": "code",
											"value": "",
											"description": "(Required) Error code"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "index",
			"item": [
				{
					"name": "index route",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - status, message, and version\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('status', 'message', 'version');",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should be a non-empty string\");",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");",
									"    pm.expect(responseData.version).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Version should be a non-empty string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": [
						{
							"name": "The API status",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\",\n  \"version\": \"<string>\"\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.request.headers.add({key: 'X-API-TOKEN', value: pm.environment.get(\"apiKey\") });",
					"",
					"pm.sendRequest({",
					"    url: pm.environment.get(\"baseUrl\") + \"/api/auth/login\",",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/json'",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({",
					"            email: \"test@test.test\",",
					"            password: \"test\"",
					"        })",
					"    }",
					"}, function (err, res) {",
					"    if (!err) {",
					"        var json = res.json();",
					"        pm.environment.set(\"bearerToken\", json.token);",
					"    }",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost"
		}
	]
}